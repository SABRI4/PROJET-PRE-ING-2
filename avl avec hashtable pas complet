// MANQUE 2EME AVL POUR TRIER LA DATA PAR VALEURE DOCC INSERER DEPUIS HASHTABLE

#include <stdio.h> // modif l'acces a la data dans tout le prog( rajouter ->dat)
#include <stdlib.h> // usage ./avl <nb de ligne a lire> <addr fichier>
#include <string.h> // rendre hashtable locale au lieu de globale ?

typedef struct data { // dat compris dans node d'avl ascii et autonome dans la table de hash (dat hashtable)
struct data *nex; // obsolete pour contenance de data mais necessaire pour hashtab(list chained)
char *data;
int asc;
int occ;
}dat;

typdef struct node { //pour avl trié via valeur ascii | + réutilisation dans pour root2 (2eme avl trié par occ)
int bal;
struct data *dat;
struct node *fg;	
struct node *fd;
}

dat *hashtable[TABSIZE] = {NULL};

unisgned int hashfunc(dat d1) { // dat *d1 ou dat d1 ??
char *data = NULL;
strcpy(data, d1->data);

unsigned int h = 0;
while(*data) {
h = (h*31) + (*data++);
}
return h % TABSIZE;
}

void procHash(char *data) {
unsigned int index = hashfunc(data);

dat *curr = hashtable[index]
while(curr != NULL) {
if(strcmp(curr->data, data)==0) {
curr->occ++;
printf("data found at %d @ | %s\n", index, data);
return;
}
curr = curr->nex;
}
// cas ou data n'est pas déja présente [pas besoin de newnode car la dat existe deja depuis lextraction
// par contre necessité d'initialiser le "nex" pour lier la chaine et integrer ce dat dans hashtable
d1->occ = 1;
d1->nex = hashtable[index];
hashtable[index] = d1;
printf("data added @idx : %d\n", index);
}

int getAsci(char *data) {
int r = 0;
for (int i = 0; data[i] != '\0'; i++) {
r = (r << 8) | data[i];
}
return r;
}

int max(int a, int b) {
if (a > b) {
return a;
}
else {
return b;
} 
}

node *newNode(char *data1) {
struct node *avl = malloc(sizeof(node));
avl->dat->occ = 0;
avl->bal = 1;
avl->dat->asc = getAsci(data1);
avl->fd = NULL;
avl->fg = NULL;
strcpy(avl->dat>data, data1);
if (avl != NULL) {
return avl;
}
}

node *rightRotate(node *y) {
printf("CALL RIGHTROTATE\n");
node *x = y->fg;
node *T2 = x->fd;

x->fd = y;
y->fg = T2;

y->bal = max(bal1(y->fg), bal1(y->fd)) + 1;
x->bal = max(bal1(x->fg), bal1(x->fd)) + 1;

return x;

}

node *leftRotate(node *x) {
printf("CALL LEFTRORATE\n");
node *y = x->fd;
node *t2 = y->fg;

x->bal = max(bal1(x->fg), bal1(x->fd)) + 1;
y->bal = max(bal1(y->fg), bal1(y->fd)) + 1;

return y;

}

int getb(node *avl) {
if (avl == NULL) {
return 0;
}
return bal1(avl->fg) - bal1(avl->fd);
}

node *insert(node *avl, char *data) {
printf("CALL INSERT\n");
printf("1st verif %s\n", data);
if(avl == NULL) {
return newNode(data);
}

int key = getAsci(data);
printf("ACTUAL NODE KEY : %d || (OBS)DATA TRANS TO GETASCI %s || BASE DATA TRANS TO INSERT %s\n", key, av>

if( key > avl->asc){
/*if(avl->fd == NULL) {
avl->fd = newNode(data);
printf("call newnode in rec tree\n");
}
else {*/
printf("recc > ASC : %d | STR : %s\n", key, data);
avl->fd = insert(avl->fd, data);
printf("after avl-> fd del attribute\n");
}
//}
else if (key < avl->asc){
if(avl->fg == NULL) {
avl->fg = newNode(data);
}
else {
avl->fg = insert(avl->fg, data);
printf("recc < ASC : %d | STR : %s\n", key, data);
}
}
else { // cas d'égalité // ici insérer dans table de hash
printf("occ FOUND ASC : %d | STR %s\n", key, data);
procHash(avl->dat); // le d1 transmis a procHash
return avl;
}
printf("avl test %d\n", avl->bal);
printf("bef avl->bal = \n");
printf("segfault test sequence :\n");
printf("AVL BAL TEST %d\n", avl->bal);
if(avl->fg ==  NULL){printf("avl fg NULL\n");}
printf("AVL FG BAL1 TEST %d\n", bal1(avl->fg));
printf("AVL FD BAL1 TEST %d\n", bal1(avl->fd));
printf("avl->bal value %d || bal1(avl->fg) %d || bal1(avl->fd) %d\n", avl->bal, bal1(avl->fg), bal1(avl->>
//avl->bal = 1 + max(bal1(avl->fg), bal1(avl->fd));
printf("aft avl->bal1 = ||bef int balance = getb(avl);\n");
 
int balance = getb(avl);

printf("btest 1\n");
if (balance > 1 && key < avl->fg->asc) {
return rightRotate(avl);
}
printf("btest 2\n");
if (balance < -1 && key > avl->fd->asc) {
return leftRotate(avl);
}
printf("btest 3\n");
if (balance > 1 && key > avl->fg->asc) {
avl->fg = leftRotate(avl->fg);
return rightRotate(avl);        
}
printf("btest 4\n");
if (balance < -1 && key < avl->fd->asc) {
avl->fd = rightRotate(avl->fd);
return leftRotate(avl);
}
avl->bal = 1 + max(bal1(avl->fg), bal1(avl->fd));
if(balance != avl->bal){printf("DISS° BALANCE : AVL BAL | %d/%d |\n", balance, avl->bal);}
avl->ba = balance;
printf("bef return avl\n");
return avl;

}


node *search(node *avl, int key) {
if(avl == NULL || key == avl->asc) {
return avl;
}
if (key > avl->asc) {
return search(avl->fd, key);
}
else if(key < avl->asc) {
return search(avl->fg, key);
}

}

void prefix(node *avl, int x) {
if (avl != NULL) {
x++;
prefix(avl->fg, x);
printf("VILLE : %s / OCC : %d /(OBS)BAL : %d / ASC : %d / INDEX -- %d / SUPP RBALANCE : %d\n", avl->data,>
x++;
prefix(avl->fd, x);
}
}

int main(int argc, char *argv[]) {

int row = 0;
char csv[50];
node *root = NULL;
node *root2 = NULL; // root for avl trié par key d'occ

if(argc < 2) {
printf("nb d'arg insuffisant\n");
exit(1);
}
else {
row = atoi(argv[1]);
strcpy(csv, argv[2]);
}

FILE *file = fopen(csv, "r");
if(file == NULL) {
printf("file null\n");
exit(1);
}
char buff[256];
int ct = 0;

while (fgets(buff, sizeof(buff), file) != NULL && ct < row) {
char *token = strtok(buff, ";");
int col = 1;

while (token != NULL && col <= 6) {
if (col == 3 | col == 4){
printf("VERIF : %s\n", token);
root = insert(root, token);
}
token = strtok(NULL, ";");
col++;
}
ct++;
}
fclose(file);
printf("PREFIX\n");
prefix(root); // pas nécessaire
// ici inserer la hashtable dans un avl | réutiliser la fonction insert?
// au lieu de FILE fopen utiliser while curr != NULL en utilisant variable globale hashtable 

}
