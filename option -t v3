#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MACRO_IGN1 1 // ignorer toute les occ == 1 à l'insertion dans l'avl
#define MACRO_BUCKETSIZE 3500000 // ?


typedef struct CityInfo {
char name[60];
int occ;
int occd;
struct CityInfo *nex;
}inf;

typedef struct AvlNode {
struct CityInfo info;
int height;
struct AvlNode *fg;
struct AvlNode *fd;
// int idxTab[500] ex : idxTab[1] = htable[index] = marseille (occ = 22) |idxTab[2] = htable[index] = dijon (occ = 22)
//donc possibilité de store plusieurs doublon au meme endroit, store uniquement index de la table pr easy acces et moins de mémoire
//prendre en comppte la vile originale(1er ajouté pour cet valeur d'occ) +  toute les villes suivante de idxTab en utilisant htable(hashFunc(idxTab[i]))
int idxOccd[MACRO_BUCKETSIZE]; //SCALE 
char idxTab[MACRO_BUCKETSIZE][60]; //SCALE
int id;
}node;

//int hashFunction(const char* cityName); //prototype hashFunc utilisée dans tt le programme  
inf *result[11] = {NULL};

void freeList(inf **root) {

inf *curr = *root;
inf *nex;

while(curr != NULL) {
nex = curr->nex;
free(curr);
curr = nex;
}
*root = NULL;
}

void freeAvl(node *avl) {
if(avl == NULL) {
return;
}

freeAvl(avl->fg);
freeAvl(avl->fd);
free(avl);

}

int max(int a, int b) {
if (a > b) {
return a;
}
else {
return b;
} 
}

int getH(node *avl) {
if(avl == NULL) {
return 0;
}
return avl->height;
}

int getB(node *avl) {
if(avl == NULL) {
return 0;
}
return getH(avl->fg) - getH(avl->fd);
}

node *RRotate(node *y) {
node *x = y->fg;
node *T2 = x->fd;

y->fd = y;
y->fg = T2;

y->height = 1 + max(getH(y->fg), getH(y->fd));
x->height = 1 + max(getH(x->fg), getH(x->fd));

return x;
}

node *LRotate(node *x) {
node *y = x->fd;
node *T2 = y->fg;

y->fg = x;
x->fd = T2;

x->height = 1 + max(getH(x->fg), getH(x->fd));
y->height = 1 + max(getH(y->fg), getH(y->fd));

return y;
}

node *newNode(inf *city) {
node *new = malloc(sizeof(node));
if (new != NULL){
new->info = *city;
if(new->info.occ != city->occ){printf("DISS ERROR\n");exit(1);}
new->height = 1;
new->fg = NULL;
new->fd = NULL;
new->id = 0;
return new;
}
}

node *insert(node *avl, inf *city) {
//printf("AVL CALL\n");
if(avl == NULL){
return newNode(city);
}
int key = city->occ;
//printf("CITY KEY %d\n", key);
if(key > avl->info.occ) {
avl->fd = insert(avl->fd, city);
}
else if(key < avl->info.occ) {
avl->fg = insert(avl->fg, city);
}
else if(key == avl->info.occ){ //meme nb d'occ mais ville forcement differentes car doublons rassemlbés dans htable.
//printf("ADDED TO OCC %d | AS %d TH IN IDXTAB | MAIN CITY %s\n", avl->info.occ, avl->id, avl->info.name);
strcpy(avl->idxTab[avl->id], city->name);
avl->idxOccd[avl->id] = city->occd;
//avl->idxTab[avl->id] = hashFunction(city->name);
avl->id++;
}
int balance = getB(avl);

//ici rotations
if (balance > 1 && key < avl->fg->info.occ) {
return RRotate(avl);
}

if (balance < -1 && key > avl->fd->info.occ){
return LRotate(avl);
}

if (balance > 1 && key > avl->fg->info.occ) {
avl->fg = LRotate(avl->fg);
return RRotate(avl);
}

if (balance < -1 && key < avl->fd->info.occ) {
avl->fd = RRotate(avl->fd);
return LRotate(avl);
}

return avl;

}

node *parseTable(node *avl, inf **root) {
if(avl==NULL){printf("avl null parseTable\n");}
if(*root==NULL){printf("root null parseTable 2\n");}
if(root==NULL){printf("root null parseTable\n");}
printf("bef access to (*root)\n");
printf("%s\n",(*root)->name);   
 printf("START PARSE\n");
inf *curr = *root;   
int fline = 1;
printf("bef while parseTable\n");
 while(curr != NULL) {
//printf("insde while parseTablelll\n");    
if(((curr->occ > 1 || fline) && MACRO_IGN1) || MACRO_IGN1 == 0) {
//printf("AVL INSERTION\n");
avl = insert(avl, curr);
if(curr->occ == 1) {fline=0;}    
}
curr = curr->nex;
    }
//freeList(root); case probleme pr result ??
return avl;
}

inf *newInfo(char *cname, int occ, int occd) {
inf *new = malloc(sizeof(inf));
if (new != NULL) {
strcpy(new->name, cname);
new->occ = occ;
new->occd = occd;
new->nex = NULL;
return new;
}
}

int search(inf **root, char *cname, int occd) {
//printf("search call\n");
    inf *curr = *root;
    while(curr != NULL) {
        if(strcmp(curr->name, cname) == 0) {
            curr->occ++;
            if(occd) {curr->occd++;}
            return 1;
        }
        curr = curr->nex;
    }
    return 0;
}

inf *process(char *cname, int occ, int occd, inf **root) {
        if(root == NULL) {printf("ROOT NULL PROCESS\n");}
    inf *new = newInfo(cname, occ, occd);
    if(new == NULL) {printf("newinf NULL\n");exit(1);}
    
    if(search(root, cname, occd)) {
        return *root;
    } 
    else if(search(root, cname, occd) == 0) {
    new->nex = *root;
    *root = new;
    return *root;
    }
}

inf * proCsv(char *csv, int row, inf **root) {
FILE *file = fopen(csv, "r");
if( file == NULL) {printf("file NULL\n"); exit(1);}

char buff[256];
int col;
int ct = 0 ; // 1 pour eviter town a town b
int step;
int fline = 1;

while(fgets(buff, sizeof(buff), file) != NULL && ct < row) {
char *token = strtok(buff, ";");
col = 1;
//printf("-------------------------------------ROW %d----------------------\n", ct);// A DELETE
if(fline) {
printf("skipping fline\n");
fline = 0;
ct++;
continue;
}

while(token != NULL && col <= 6) {
//printf("inside while 1 || COL = %d\n", col);
if(col == 2) {
step = atoi(token);
}
else if(col == 3 || col == 4) {
if(step == 1 && col == 3) {//logique d'ajt en cas de ville1 == épart
//printf("bef process 1, 1\n");
*root = process(token, 1, 1, root);
}
else {
//printf("bef process 1, 0\n");
*root = process(token, 1, 0, root);
}
}
token = strtok(NULL, ";");
col++; 
}
ct++;
}
printf("fclose file\n");
fclose(file);
return *root;
}

/*void tp1(node *avl) {
    printf("main : %s | %d | %d\n", avl->info.name, avl->info.occ, avl->info.occd);
    printf("id %d\n", avl->id);
    for(int i = 0; i < avl->id; i++) {
        printf("idx %d | %s | %d | %d\n", i, avl->idxTab[i], avl->info.occ, avl->idxOccd[i]);
    }
}*/

void cprint(inf **root) {
inf *curr = *root;
     while(curr != NULL) {
    printf("%s -> %d\n", curr->name, curr->occ);
    curr = curr->nex;  
        printf("root nex done\n");
    }
}

void extr(node *avl, int count) {
if(count > 10 || avl == NULL) {
return;
}
else {
printf("avl != NULL && count < 10 !\n");
}
extr(avl->fd, count);
if(&avl->info == NULL){printf("AVL INFO NULL EXTR\n");}
//if(avl->info == NULL){printf("AVL INFO NULL EXTR22\n");}
printf("bef access avl->info\n");
printf("%s EXTR\n", avl->info.name);
result[count] = &avl->info;
count++;
printf("bef acces idxTab\n");
for(int i = 0; i < avl->id; i++) {
if(count > 10){break;}
result[count] = newInfo(avl->idxTab[i], avl->info.occ, avl->idxOccd[i]);
count++;
printf("boucle : newInfo...\n");
}                //logique pr inserer tout le bucket dans result |||||| ajouter une fonction pour trier par ordre alphabetique et fini
//count += avl->id; // id - 1 / id / id+1 ?

extr(avl->fg, count);
}

void parc(node *avl) { // a modif tq => fd/racine/fg
if(avl == NULL) {
return;
}
parc(avl->fd);

printf("main %s | %d | idx %d\n", avl->info.name, avl->info.occ, avl->id);
if(avl->id){
for(int i = 0; i < avl->id; i++) {
printf("idx %d | %s | %d\n", i, avl->idxTab[i], avl->idxOccd[i]);
}
}
parc(avl->fg);
}

inf *adjust(inf **root) {

int ut;
inf *curr = *root;
while(curr != NULL) {
if(curr->occ > 1) { // ajustement ville à la fois depart et arrivée
curr->occ = (curr->occ - curr->occd)/2;
curr->occ += curr->occd; // a verif
}

curr = curr->nex;
}
return *root;
}

void tparc(node *avl){
if(avl == NULL) {
return;
}
tparc(avl->fd);
printf("KEY = %d | MAIN = %s\n", avl->info.occ, avl->info.name);
tparc(avl->fg);
}

int main(int argc, char *argv[]) {

int row = 0;
char csv[50];

node *avl = NULL;
inf *root = NULL;

if(argc < 2) {
printf("USAGE : ./file <rows> <csv_file>\n");
exit(1);
}
else {
row = atoi(argv[1]);
strcpy(csv, argv[2]);
}
printf("bef lecture / insertion dans liste\n");
root = proCsv(csv, row, &root); //lecture fichier csv -> insertion / incrementation dans htable
root = adjust(&root);
printf("bef cprint\n");
//cprint(&root);
printf("bef parsetable\n");
//if(*root == NULL){printf("main : root == NULL\n");}
avl = parseTable(avl, &root); // parcours de la table et ajout de tout les occ > 1 dans avl
if(avl == NULL){printf("AFTER PARESETAVLE RETURN AVL NULL\n");}
printf("bef 2nd cprint(obs) bef parc\n");
//cprint(&root);inf deja free
//parc(avl);
printf("bef extr\n");
extr(avl, 0);
printf("after extr\n");
//freeAvl(avl);
printf("after free AVL\n");
//result[0] = malloc(sizeof(inf));
//result[0] = newInfo(avl->info.name, 1, 56);
//printf("%s | %d\n", result[0]->name, result[0]->occ);
if(avl == NULL) {printf("AVL NULL BEF RESULT 0 \n");}
//result[0] = &avl->info;
tparc(avl);
printf("after access rsult 0\n");
for(int i = 0; i < 10; i++) {
if(result[i] == NULL) {printf("case %d empty!\n", i);}
else{
printf("%d : %s | %d |%d\n", i, result[i]->name, result[i]->occ, result[i]->occd);
}
}
printf("afetr rez\n");
freeAvl(avl);
freeList(&root);
printf("memory freed\n");
}
